// src/pages/Booking.jsx
import React, { useEffect, useMemo, useState } from 'react'
import { useParams, useNavigate, useLocation, Link } from 'react-router-dom'
import { Container, Row, Col, Card, Form, Button, Alert, Badge } from 'react-bootstrap'
import axios from '../api/axiosInstance'

const todayStr = (d = new Date()) => d.toISOString().slice(0,10)
const addDays = (n) => {
  const d = new Date()
  d.setDate(d.getDate() + n)
  return todayStr(d)
}

export default function Booking(){
  const { id } = useParams()
  const nav = useNavigate()
  const loc = useLocation()
  const nextUrl = `/booking/${id}`

  // l·∫•y auth t·ª´ localStorage
  const auth = (() => {
    try { return JSON.parse(localStorage.getItem('auth') || '{}') } catch { return {} }
  })()

  // n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p -> chuy·ªÉn sang login k√®m next
  useEffect(()=>{
    if (!auth?.token) {
      nav(`/login?next=${encodeURIComponent(nextUrl)}`, { replace: true })
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id])

  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [room, setRoom] = useState(null)

  const [form, setForm] = useState({
    checkIn: addDays(1),
    checkOut: addDays(2),
    guests: 2,
    specialRequests: ''
  })
  const onChange = (e)=> setForm({ ...form, [e.target.name]: e.target.value })

  // t·∫£i th√¥ng tin ph√≤ng ƒë·ªÉ hi·ªÉn th·ªã t√≥m t·∫Øt
  useEffect(()=>{
    let mounted = true
    const API = (import.meta.env.VITE_API_BASE ?? '/api').replace(/\/$/, '')
    setLoading(true); setError('')
    axios.get(`${API}/rooms/${id}`, { headers: { Accept: 'application/json' } })
      .then(res => {
        if (mounted) setRoom(res.data?.room || null)
      })
      .catch(err => setError(err?.response?.data?.message || err.message))
      .finally(()=> mounted && setLoading(false))
    return ()=> { mounted=false }
  }, [id])

  const capacity = room?.capacity ?? 0
  const price = room?.priceVnd ?? 0
  const nights = useMemo(()=>{
    try{
      const inD  = new Date(form.checkIn)
      const outD = new Date(form.checkOut)
      const diff = Math.round((outD - inD) / (1000*60*60*24))
      return Math.max(0, diff)
    }catch{ return 0 }
  }, [form.checkIn, form.checkOut])

  const total = useMemo(()=> price * Math.max(1, nights), [price, nights])

  const validate = () => {
    if (!form.checkIn || !form.checkOut) return 'Vui l√≤ng ch·ªçn ng√†y nh·∫≠n/tr·∫£ ph√≤ng'
    if (new Date(form.checkOut) <= new Date(form.checkIn)) return 'Ng√†y tr·∫£ ph√≤ng ph·∫£i sau ng√†y nh·∫≠n ph√≤ng'
    if (!form.guests || Number(form.guests) < 1) return 'S·ªë kh√°ch kh√¥ng h·ª£p l·ªá'
    if (capacity && Number(form.guests) > capacity) return `S·ªë kh√°ch t·ªëi ƒëa: ${capacity}`
    if (auth?.role && auth.role.toLowerCase() !== 'customer') return 'Ch·ªâ t√†i kho·∫£n kh√°ch h√†ng (customer) m·ªõi ƒë∆∞·ª£c ƒë·∫∑t ph√≤ng'
    return ''
  }

  const [submitting, setSubmitting] = useState(false)
  const [success, setSuccess] = useState(null)

  const submit = async (e) => {
    e.preventDefault()
    const msg = validate()
    if (msg) { setError(msg); return }

    setSubmitting(true); setError(''); setSuccess(null)
    try{
      const payload = {
        roomId: Number(id),
        guests: Number(form.guests),
        // G·ª≠i ƒë·ªß alias ƒë·ªÉ BE map ƒë∆∞·ª£c
        checkIn: form.checkIn,
        checkOut: form.checkOut,
        checkIn: form.checkIn,
        checkOut: form.checkOut
        }
      // BE: POST /api/bookings -> BookingResponse
      const { data } = await axios.post('/bookings', payload)
      setSuccess(data) // {bookingId, totalPrice,...} (tu·ª≥ BE)
      // chuy·ªÉn v·ªÅ chi ti·∫øt ph√≤ng ho·∫∑c trang ch·ªß sau v√†i gi√¢y n·∫øu mu·ªën
      // nav(`/rooms/${id}?booked=1`, { replace: true })
    }catch(err){
      setError(err?.response?.data?.message || err.message)
    }finally{
      setSubmitting(false)
    }
  }

  return (
    <Container className="py-4" style={{maxWidth: '1100px'}}>
      <h2 className="fw-bold mb-3">ƒê·∫∑t ph√≤ng</h2>

      {!auth?.token && (
        <Alert variant="warning">
          B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t ph√≤ng. ƒêang chuy·ªÉn h∆∞·ªõng‚Ä¶
        </Alert>
      )}

      {loading && <Alert variant="info">ƒêang t·∫£i th√¥ng tin ph√≤ng‚Ä¶</Alert>}
      {error && <Alert variant="danger" className="mb-3">{error}</Alert>}
      {success && (
        <Alert variant="success" className="mb-3">
          ƒê·∫∑t ph√≤ng th√†nh c√¥ng! M√£ ƒë∆°n: <strong>{success.bookingId ?? '‚Äî'}</strong> ‚Äî T·ªïng ti·ªÅn:{" "}
          <strong>{(success.totalPrice ?? total).toLocaleString('vi-VN')}‚Ç´</strong>
        </Alert>
      )}

      <Row className="g-4">
        <Col lg={7}>
          <Card className="card-soft">
            <Card.Body>
              <Card.Title>Th√¥ng tin ƒë·∫∑t ph√≤ng</Card.Title>
              <Form onSubmit={submit}>
                <Row className="g-3 mt-1">
                  <Col md={6}>
                    <Form.Label className="small">Ng√†y nh·∫≠n ph√≤ng</Form.Label>
                    <Form.Control
                      type="date"
                      min={todayStr()}
                      name="checkInDate"
                      value={form.checkInDate}
                      onChange={onChange}
                      required
                    />
                  </Col>
                  <Col md={6}>
                    <Form.Label className="small">Ng√†y tr·∫£ ph√≤ng</Form.Label>
                    <Form.Control
                      type="date"
                      min={form.checkInDate || todayStr()}
                      name="checkOutDate"
                      value={form.checkOutDate}
                      onChange={onChange}
                      required
                    />
                  </Col>
                </Row>

                <Form.Group className="mt-3">
                  <Form.Label className="small">S·ªë kh√°ch</Form.Label>
                  <Form.Control
                    type="number"
                    min={1}
                    max={capacity || undefined}
                    name="guests"
                    value={form.guests}
                    onChange={onChange}
                    required
                  />
                  {capacity ? <div className="small text-muted mt-1">T·ªëi ƒëa {capacity} kh√°ch</div> : null}
                </Form.Group>

                <Form.Group className="mt-3">
                  <Form.Label className="small">Y√™u c·∫ßu ƒë·∫∑c bi·ªát (tu·ª≥ ch·ªçn)</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    name="specialRequests"
                    value={form.specialRequests}
                    onChange={onChange}
                    placeholder="VD: T·∫ßng cao, ph√≤ng kh√¥ng h√∫t thu·ªëc‚Ä¶"
                  />
                </Form.Group>

                <Button type="submit" className="w-100 mt-3" variant="danger" disabled={submitting || !auth?.token}>
                  {submitting ? 'ƒêang x·ª≠ l√Ω‚Ä¶' : 'X√°c nh·∫≠n ƒë·∫∑t ph√≤ng'}
                </Button>
              </Form>
            </Card.Body>
          </Card>
        </Col>

        <Col lg={5}>
          <Card className="card-soft">
            <Card.Body>
              <Card.Title>Ph√≤ng ƒë√£ ch·ªçn</Card.Title>
              {!room ? (
                <div className="text-muted">Kh√¥ng t√¨m th·∫•y ph√≤ng.</div>
              ) : (
                <>
                  <div className="d-flex gap-3 mt-2">
                    <img
                      src={room.imageUrl}
                      alt={room.name}
                      style={{width: 120, height: 80, objectFit: 'cover', borderRadius: 8}}
                    />
                    <div>
                      <div className="fw-semibold">{room.name}</div>
                      <div className="small text-muted">
                        üë• {room.capacity ?? 0} kh√°ch &nbsp;|&nbsp; üõèÔ∏è {room.type || '‚Äî'}
                      </div>
                      <div className="small">
                        {(room.amenities || []).slice(0,3).map((a,i)=>(
                          <Badge key={i} bg="light" text="dark" className="me-1">{a}</Badge>
                        ))}
                      </div>
                    </div>
                  </div>

                  <hr/>
                  <div className="d-flex justify-content-between">
                    <div>Gi√°/ƒë√™m</div>
                    <div className="fw-semibold">{(room.priceVnd||0).toLocaleString('vi-VN')}‚Ç´</div>
                  </div>
                  <div className="d-flex justify-content-between">
                    <div>S·ªë ƒë√™m</div>
                    <div className="fw-semibold">{nights}</div>
                  </div>
                  <div className="d-flex justify-content-between">
                    <div>Thu·∫ø & ph√≠</div>
                    <div className="fw-semibold">ƒë√£ g·ªìm</div>
                  </div>
                  <hr/>
                  <div className="d-flex justify-content-between">
                    <div className="fw-bold">T·ªïng thanh to√°n</div>
                    <div className="fw-bold text-danger">{total.toLocaleString('vi-VN')}‚Ç´</div>
                  </div>

                  <div className="mt-3">
                    <Link to={`/rooms/${id}`}>‚Üê Xem l·∫°i chi ti·∫øt ph√≤ng</Link>
                  </div>
                </>
              )}
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  )
}
